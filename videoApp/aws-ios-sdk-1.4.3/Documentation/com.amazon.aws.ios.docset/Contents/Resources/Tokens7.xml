<?xml version="1.0" encoding="UTF-8"?>
<Tokens version="1.0">
	<File path="Classes/AmazonDynamoDBClient.html">
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/cl/AmazonDynamoDBClient</TokenIdentifier>
			<Abstract type="html">&lt;summary&gt;
Interface for accessing AmazonDynamoDB.</Abstract>
			<DeclaredIn>AmazonDynamoDBClient.h</DeclaredIn>
			
			<NodeRef refid="7"/>
		</Token>
		
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AmazonDynamoDBClient/listTables:</TokenIdentifier>
			<Abstract type="html">&lt;p&gt;
Retrieves a paginated list of table names created by the AWS Account of the caller in the AWS Region (e.g. us-east-1 ).
&lt;/p&gt;</Abstract>
			<DeclaredIn>AmazonDynamoDBClient.h</DeclaredIn>			
			
	<RelatedTokens>
		<TokenIdentifier>//apple_ref/occ/cl/DynamoDBListTablesRequest</TokenIdentifier>
		<TokenIdentifier>//apple_ref/occ/cl/DynamoDBListTablesResponse</TokenIdentifier>
		
	</RelatedTokens>
	
			<Declaration>- (DynamoDBListTablesResponse *)listTables:(DynamoDBListTablesRequest *)listTablesRequest</Declaration>
			<Parameters>
				<Parameter>
					<Name>listTablesRequest</Name>
					<Abstract type="html">Container for the necessary parameters to execute the ListTables service method on
AmazonDynamoDB.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">The response from the ListTables service method, as returned by AmazonDynamoDB.</Abstract></ReturnValue>
			<Anchor>//api/name/listTables:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AmazonDynamoDBClient/query:</TokenIdentifier>
			<Abstract type="html">&lt;p&gt;
Gets the values of one or more items and its attributes by primary key (composite primary key, only).
&lt;/p&gt;
&lt;p&gt;
Narrow the scope of the query using comparison operators on the RangeKeyValue of the composite key. Use the
ScanIndexForward parameter to get results in forward or reverse order by range key.
&lt;/p&gt;</Abstract>
			<DeclaredIn>AmazonDynamoDBClient.h</DeclaredIn>			
			
	<RelatedTokens>
		<TokenIdentifier>//apple_ref/occ/cl/DynamoDBQueryRequest</TokenIdentifier>
		<TokenIdentifier>//apple_ref/occ/cl/DynamoDBQueryResponse</TokenIdentifier>
		
	</RelatedTokens>
	
			<Declaration>- (DynamoDBQueryResponse *)query:(DynamoDBQueryRequest *)queryRequest</Declaration>
			<Parameters>
				<Parameter>
					<Name>queryRequest</Name>
					<Abstract type="html">Container for the necessary parameters to execute the Query service method on AmazonDynamoDB.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">The response from the Query service method, as returned by AmazonDynamoDB.</Abstract></ReturnValue>
			<Anchor>//api/name/query:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AmazonDynamoDBClient/batchWriteItem:</TokenIdentifier>
			<Abstract type="html">&lt;p&gt;
Allows to execute a batch of Put and/or Delete Requests for many tables in a single call. A total of 25 requests are
allowed.
&lt;/p&gt;
&lt;p&gt;
There are no transaction guarantees provided by this API. It does not allow conditional puts nor does it support return
values.
&lt;/p&gt;</Abstract>
			<DeclaredIn>AmazonDynamoDBClient.h</DeclaredIn>			
			
	<RelatedTokens>
		<TokenIdentifier>//apple_ref/occ/cl/DynamoDBBatchWriteItemRequest</TokenIdentifier>
		<TokenIdentifier>//apple_ref/occ/cl/DynamoDBBatchWriteItemResponse</TokenIdentifier>
		
	</RelatedTokens>
	
			<Declaration>- (DynamoDBBatchWriteItemResponse *)batchWriteItem:(DynamoDBBatchWriteItemRequest *)batchWriteItemRequest</Declaration>
			<Parameters>
				<Parameter>
					<Name>batchWriteItemRequest</Name>
					<Abstract type="html">Container for the necessary parameters to execute the BatchWriteItem service method on
AmazonDynamoDB.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">The response from the BatchWriteItem service method, as returned by AmazonDynamoDB.</Abstract></ReturnValue>
			<Anchor>//api/name/batchWriteItem:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AmazonDynamoDBClient/updateItem:</TokenIdentifier>
			<Abstract type="html">&lt;p&gt;
Edits an existing item&apos;s attributes.
&lt;/p&gt;
&lt;p&gt;
You can perform a conditional update (insert a new attribute name-value pair if it doesn&apos;t exist, or replace an existing
name-value pair if it has certain expected attribute values).
&lt;/p&gt;</Abstract>
			<DeclaredIn>AmazonDynamoDBClient.h</DeclaredIn>			
			
	<RelatedTokens>
		<TokenIdentifier>//apple_ref/occ/cl/DynamoDBUpdateItemRequest</TokenIdentifier>
		<TokenIdentifier>//apple_ref/occ/cl/DynamoDBUpdateItemResponse</TokenIdentifier>
		
	</RelatedTokens>
	
			<Declaration>- (DynamoDBUpdateItemResponse *)updateItem:(DynamoDBUpdateItemRequest *)updateItemRequest</Declaration>
			<Parameters>
				<Parameter>
					<Name>updateItemRequest</Name>
					<Abstract type="html">Container for the necessary parameters to execute the UpdateItem service method on
AmazonDynamoDB.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">The response from the UpdateItem service method, as returned by AmazonDynamoDB.</Abstract></ReturnValue>
			<Anchor>//api/name/updateItem:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AmazonDynamoDBClient/putItem:</TokenIdentifier>
			<Abstract type="html">&lt;p&gt;
Creates a new item, or replaces an old item with a new item (including all the attributes).
&lt;/p&gt;
&lt;p&gt;
If an item already exists in the specified table with the same primary key, the new item completely replaces the
existing item. You can perform a conditional put (insert a new item if one with the specified primary key doesn&apos;t
exist), or replace an existing item if it has certain attribute values.
&lt;/p&gt;</Abstract>
			<DeclaredIn>AmazonDynamoDBClient.h</DeclaredIn>			
			
	<RelatedTokens>
		<TokenIdentifier>//apple_ref/occ/cl/DynamoDBPutItemRequest</TokenIdentifier>
		<TokenIdentifier>//apple_ref/occ/cl/DynamoDBPutItemResponse</TokenIdentifier>
		
	</RelatedTokens>
	
			<Declaration>- (DynamoDBPutItemResponse *)putItem:(DynamoDBPutItemRequest *)putItemRequest</Declaration>
			<Parameters>
				<Parameter>
					<Name>putItemRequest</Name>
					<Abstract type="html">Container for the necessary parameters to execute the PutItem service method on AmazonDynamoDB.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">The response from the PutItem service method, as returned by AmazonDynamoDB.</Abstract></ReturnValue>
			<Anchor>//api/name/putItem:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AmazonDynamoDBClient/describeTable:</TokenIdentifier>
			<Abstract type="html">&lt;p&gt;
Retrieves information about the table, including the current status of the table, the primary key schema and when the
table was created.
&lt;/p&gt;
&lt;p&gt;
If the table does not exist, Amazon DynamoDB returns a ResourceNotFoundException .
&lt;/p&gt;</Abstract>
			<DeclaredIn>AmazonDynamoDBClient.h</DeclaredIn>			
			
	<RelatedTokens>
		<TokenIdentifier>//apple_ref/occ/cl/DynamoDBDescribeTableRequest</TokenIdentifier>
		<TokenIdentifier>//apple_ref/occ/cl/DynamoDBDescribeTableResponse</TokenIdentifier>
		
	</RelatedTokens>
	
			<Declaration>- (DynamoDBDescribeTableResponse *)describeTable:(DynamoDBDescribeTableRequest *)describeTableRequest</Declaration>
			<Parameters>
				<Parameter>
					<Name>describeTableRequest</Name>
					<Abstract type="html">Container for the necessary parameters to execute the DescribeTable service method on
AmazonDynamoDB.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">The response from the DescribeTable service method, as returned by AmazonDynamoDB.</Abstract></ReturnValue>
			<Anchor>//api/name/describeTable:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AmazonDynamoDBClient/scan:</TokenIdentifier>
			<Abstract type="html">&lt;p&gt;
Retrieves one or more items and its attributes by performing a full scan of a table.
&lt;/p&gt;
&lt;p&gt;
Provide a ScanFilter to get more specific results.
&lt;/p&gt;</Abstract>
			<DeclaredIn>AmazonDynamoDBClient.h</DeclaredIn>			
			
	<RelatedTokens>
		<TokenIdentifier>//apple_ref/occ/cl/DynamoDBScanRequest</TokenIdentifier>
		<TokenIdentifier>//apple_ref/occ/cl/DynamoDBScanResponse</TokenIdentifier>
		
	</RelatedTokens>
	
			<Declaration>- (DynamoDBScanResponse *)scan:(DynamoDBScanRequest *)scanRequest</Declaration>
			<Parameters>
				<Parameter>
					<Name>scanRequest</Name>
					<Abstract type="html">Container for the necessary parameters to execute the Scan service method on AmazonDynamoDB.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">The response from the Scan service method, as returned by AmazonDynamoDB.</Abstract></ReturnValue>
			<Anchor>//api/name/scan:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AmazonDynamoDBClient/createTable:</TokenIdentifier>
			<Abstract type="html">&lt;p&gt;
Adds a new table to your account.
&lt;/p&gt;
&lt;p&gt;
The table name must be unique among those associated with the AWS Account issuing the request, and the AWS Region that
receives the request (e.g. us-east-1 ).
&lt;/p&gt;
&lt;p&gt;
The CreateTable operation triggers an asynchronous workflow to begin creating the table. Amazon DynamoDB immediately
returns the state of the table ( CREATING ) until the table is in the ACTIVE state. Once the table is in the ACTIVE
state, you can perform data plane operations.
&lt;/p&gt;</Abstract>
			<DeclaredIn>AmazonDynamoDBClient.h</DeclaredIn>			
			
	<RelatedTokens>
		<TokenIdentifier>//apple_ref/occ/cl/DynamoDBCreateTableRequest</TokenIdentifier>
		<TokenIdentifier>//apple_ref/occ/cl/DynamoDBCreateTableResponse</TokenIdentifier>
		
	</RelatedTokens>
	
			<Declaration>- (DynamoDBCreateTableResponse *)createTable:(DynamoDBCreateTableRequest *)createTableRequest</Declaration>
			<Parameters>
				<Parameter>
					<Name>createTableRequest</Name>
					<Abstract type="html">Container for the necessary parameters to execute the CreateTable service method on
AmazonDynamoDB.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">The response from the CreateTable service method, as returned by AmazonDynamoDB.</Abstract></ReturnValue>
			<Anchor>//api/name/createTable:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AmazonDynamoDBClient/updateTable:</TokenIdentifier>
			<Abstract type="html">&lt;p&gt;
Updates the provisioned throughput for the given table.
&lt;/p&gt;
&lt;p&gt;
Setting the throughput for a table helps you manage performance and is part of the Provisioned Throughput feature of
Amazon DynamoDB.
&lt;/p&gt;</Abstract>
			<DeclaredIn>AmazonDynamoDBClient.h</DeclaredIn>			
			
	<RelatedTokens>
		<TokenIdentifier>//apple_ref/occ/cl/DynamoDBUpdateTableRequest</TokenIdentifier>
		<TokenIdentifier>//apple_ref/occ/cl/DynamoDBUpdateTableResponse</TokenIdentifier>
		
	</RelatedTokens>
	
			<Declaration>- (DynamoDBUpdateTableResponse *)updateTable:(DynamoDBUpdateTableRequest *)updateTableRequest</Declaration>
			<Parameters>
				<Parameter>
					<Name>updateTableRequest</Name>
					<Abstract type="html">Container for the necessary parameters to execute the UpdateTable service method on
AmazonDynamoDB.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">The response from the UpdateTable service method, as returned by AmazonDynamoDB.</Abstract></ReturnValue>
			<Anchor>//api/name/updateTable:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AmazonDynamoDBClient/deleteTable:</TokenIdentifier>
			<Abstract type="html">&lt;p&gt;
Deletes a table and all of its items.
&lt;/p&gt;
&lt;p&gt;
If the table is in the ACTIVE state, you can delete it. If a table is in CREATING or UPDATING states then Amazon
DynamoDB returns a ResourceInUseException . If the specified table does not exist, Amazon DynamoDB returns a
ResourceNotFoundException .
&lt;/p&gt;</Abstract>
			<DeclaredIn>AmazonDynamoDBClient.h</DeclaredIn>			
			
	<RelatedTokens>
		<TokenIdentifier>//apple_ref/occ/cl/DynamoDBDeleteTableRequest</TokenIdentifier>
		<TokenIdentifier>//apple_ref/occ/cl/DynamoDBDeleteTableResponse</TokenIdentifier>
		
	</RelatedTokens>
	
			<Declaration>- (DynamoDBDeleteTableResponse *)deleteTable:(DynamoDBDeleteTableRequest *)deleteTableRequest</Declaration>
			<Parameters>
				<Parameter>
					<Name>deleteTableRequest</Name>
					<Abstract type="html">Container for the necessary parameters to execute the DeleteTable service method on
AmazonDynamoDB.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">The response from the DeleteTable service method, as returned by AmazonDynamoDB.</Abstract></ReturnValue>
			<Anchor>//api/name/deleteTable:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AmazonDynamoDBClient/deleteItem:</TokenIdentifier>
			<Abstract type="html">&lt;p&gt;
Deletes a single item in a table by primary key.
&lt;/p&gt;
&lt;p&gt;
You can perform a conditional delete operation that deletes the item if it exists, or if it has an expected attribute
value.
&lt;/p&gt;</Abstract>
			<DeclaredIn>AmazonDynamoDBClient.h</DeclaredIn>			
			
	<RelatedTokens>
		<TokenIdentifier>//apple_ref/occ/cl/DynamoDBDeleteItemRequest</TokenIdentifier>
		<TokenIdentifier>//apple_ref/occ/cl/DynamoDBDeleteItemResponse</TokenIdentifier>
		
	</RelatedTokens>
	
			<Declaration>- (DynamoDBDeleteItemResponse *)deleteItem:(DynamoDBDeleteItemRequest *)deleteItemRequest</Declaration>
			<Parameters>
				<Parameter>
					<Name>deleteItemRequest</Name>
					<Abstract type="html">Container for the necessary parameters to execute the DeleteItem service method on
AmazonDynamoDB.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">The response from the DeleteItem service method, as returned by AmazonDynamoDB.</Abstract></ReturnValue>
			<Anchor>//api/name/deleteItem:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AmazonDynamoDBClient/getItem:</TokenIdentifier>
			<Abstract type="html">&lt;p&gt;
Retrieves a set of Attributes for an item that matches the primary key.
&lt;/p&gt;
&lt;p&gt;
The GetItem operation provides an eventually-consistent read by default. If eventually-consistent reads are not
acceptable for your application, use ConsistentRead . Although this operation might take longer than a standard read, it
always returns the last updated value.
&lt;/p&gt;</Abstract>
			<DeclaredIn>AmazonDynamoDBClient.h</DeclaredIn>			
			
	<RelatedTokens>
		<TokenIdentifier>//apple_ref/occ/cl/DynamoDBGetItemRequest</TokenIdentifier>
		<TokenIdentifier>//apple_ref/occ/cl/DynamoDBGetItemResponse</TokenIdentifier>
		
	</RelatedTokens>
	
			<Declaration>- (DynamoDBGetItemResponse *)getItem:(DynamoDBGetItemRequest *)getItemRequest</Declaration>
			<Parameters>
				<Parameter>
					<Name>getItemRequest</Name>
					<Abstract type="html">Container for the necessary parameters to execute the GetItem service method on AmazonDynamoDB.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">The response from the GetItem service method, as returned by AmazonDynamoDB.</Abstract></ReturnValue>
			<Anchor>//api/name/getItem:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AmazonDynamoDBClient/batchGetItem:</TokenIdentifier>
			<Abstract type="html">&lt;p&gt;
Retrieves the attributes for multiple items from multiple tables using their primary keys.
&lt;/p&gt;
&lt;p&gt;
The maximum number of item attributes that can be retrieved for a single operation is 100. Also, the number of items
retrieved is constrained by a 1 MB the size limit. If the response size limit is exceeded or a partial result is
returned due to an internal processing failure, Amazon DynamoDB returns an UnprocessedKeys value so you can retry the
operation starting with the next item to get.
&lt;/p&gt;
&lt;p&gt;
Amazon DynamoDB automatically adjusts the number of items returned per page to enforce this limit. For example, even if
you ask to retrieve 100 items, but each individual item is 50k in size, the system returns 20 items and an appropriate
UnprocessedKeys value so you can get the next page of results. If necessary, your application needs its own logic to
assemble the pages of results into one set.
&lt;/p&gt;</Abstract>
			<DeclaredIn>AmazonDynamoDBClient.h</DeclaredIn>			
			
	<RelatedTokens>
		<TokenIdentifier>//apple_ref/occ/cl/DynamoDBBatchGetItemRequest</TokenIdentifier>
		<TokenIdentifier>//apple_ref/occ/cl/DynamoDBBatchGetItemResponse</TokenIdentifier>
		
	</RelatedTokens>
	
			<Declaration>- (DynamoDBBatchGetItemResponse *)batchGetItem:(DynamoDBBatchGetItemRequest *)batchGetItemRequest</Declaration>
			<Parameters>
				<Parameter>
					<Name>batchGetItemRequest</Name>
					<Abstract type="html">Container for the necessary parameters to execute the BatchGetItem service method on
AmazonDynamoDB.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">The response from the BatchGetItem service method, as returned by AmazonDynamoDB.</Abstract></ReturnValue>
			<Anchor>//api/name/batchGetItem:</Anchor>
		</Token>
		
	</File>
</Tokens>