<?xml version="1.0" encoding="UTF-8"?>
<Tokens version="1.0">
	<File path="Classes/DynamoDBQueryRequest.html">
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/cl/DynamoDBQueryRequest</TokenIdentifier>
			<Abstract type="html">Query Request</Abstract>
			<DeclaredIn>DynamoDBQueryRequest.h</DeclaredIn>
			
			<NodeRef refid="317"/>
		</Token>
		
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/DynamoDBQueryRequest/setTableName:</TokenIdentifier>
			<Abstract type="html">The name of the table in which you want to query. Allowed characters
are &lt;code&gt;a-z&lt;/code&gt;, &lt;code&gt;A-Z&lt;/code&gt;, &lt;code&gt;0-9&lt;/code&gt;,
&lt;code&gt;_&lt;/code&gt; (underscore), &lt;code&gt;-&lt;/code&gt; (hyphen) and
&lt;code&gt;.&lt;/code&gt; (period).
&lt;p&gt;
&lt;b&gt;Constraints:&lt;/b&gt;&lt;br/&gt;
&lt;b&gt;Length: &lt;/b&gt;3 - 255&lt;br/&gt;
&lt;b&gt;Pattern: &lt;/b&gt;[a-zA-Z0-9_.-]+&lt;br/&gt;</Abstract>
			<DeclaredIn>DynamoDBQueryRequest.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, retain) NSString *tableName</Declaration>
			
			
			<Anchor>//api/name/tableName</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/DynamoDBQueryRequest/tableName</TokenIdentifier>
			<Abstract type="html">The name of the table in which you want to query. Allowed characters
are &lt;code&gt;a-z&lt;/code&gt;, &lt;code&gt;A-Z&lt;/code&gt;, &lt;code&gt;0-9&lt;/code&gt;,
&lt;code&gt;_&lt;/code&gt; (underscore), &lt;code&gt;-&lt;/code&gt; (hyphen) and
&lt;code&gt;.&lt;/code&gt; (period).
&lt;p&gt;
&lt;b&gt;Constraints:&lt;/b&gt;&lt;br/&gt;
&lt;b&gt;Length: &lt;/b&gt;3 - 255&lt;br/&gt;
&lt;b&gt;Pattern: &lt;/b&gt;[a-zA-Z0-9_.-]+&lt;br/&gt;</Abstract>
			<DeclaredIn>DynamoDBQueryRequest.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, retain) NSString *tableName</Declaration>
			
			
			<Anchor>//api/name/tableName</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/DynamoDBQueryRequest/setAttributesToGet:</TokenIdentifier>
			<Abstract type="html">List of &lt;code&gt;Attribute&lt;/code&gt; names. If attribute names are not
specified then all attributes will be returned. If some attributes are
not found, they will not appear in the result.
&lt;p&gt;
&lt;b&gt;Constraints:&lt;/b&gt;&lt;br/&gt;
&lt;b&gt;Length: &lt;/b&gt;1 - &lt;br/&gt;</Abstract>
			<DeclaredIn>DynamoDBQueryRequest.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, retain) NSMutableArray *attributesToGet</Declaration>
			
			
			<Anchor>//api/name/attributesToGet</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/DynamoDBQueryRequest/attributesToGet</TokenIdentifier>
			<Abstract type="html">List of &lt;code&gt;Attribute&lt;/code&gt; names. If attribute names are not
specified then all attributes will be returned. If some attributes are
not found, they will not appear in the result.
&lt;p&gt;
&lt;b&gt;Constraints:&lt;/b&gt;&lt;br/&gt;
&lt;b&gt;Length: &lt;/b&gt;1 - &lt;br/&gt;</Abstract>
			<DeclaredIn>DynamoDBQueryRequest.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, retain) NSMutableArray *attributesToGet</Declaration>
			
			
			<Anchor>//api/name/attributesToGet</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/DynamoDBQueryRequest/setLimit:</TokenIdentifier>
			<Abstract type="html">The maximum number of items to return. If Amazon DynamoDB hits this
limit while querying the table, it stops the query and returns the
matching values up to the limit, and a &lt;code&gt;LastEvaluatedKey&lt;/code&gt;
to apply in a subsequent operation to continue the query. Also, if the
result set size exceeds 1MB before Amazon DynamoDB hits this limit, it
stops the query and returns the matching values, and a
&lt;code&gt;LastEvaluatedKey&lt;/code&gt; to apply in a subsequent operation to
continue the query.
&lt;p&gt;
&lt;b&gt;Constraints:&lt;/b&gt;&lt;br/&gt;
&lt;b&gt;Range: &lt;/b&gt;1 - &lt;br/&gt;</Abstract>
			<DeclaredIn>DynamoDBQueryRequest.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, retain) NSNumber *limit</Declaration>
			
			
			<Anchor>//api/name/limit</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/DynamoDBQueryRequest/limit</TokenIdentifier>
			<Abstract type="html">The maximum number of items to return. If Amazon DynamoDB hits this
limit while querying the table, it stops the query and returns the
matching values up to the limit, and a &lt;code&gt;LastEvaluatedKey&lt;/code&gt;
to apply in a subsequent operation to continue the query. Also, if the
result set size exceeds 1MB before Amazon DynamoDB hits this limit, it
stops the query and returns the matching values, and a
&lt;code&gt;LastEvaluatedKey&lt;/code&gt; to apply in a subsequent operation to
continue the query.
&lt;p&gt;
&lt;b&gt;Constraints:&lt;/b&gt;&lt;br/&gt;
&lt;b&gt;Range: &lt;/b&gt;1 - &lt;br/&gt;</Abstract>
			<DeclaredIn>DynamoDBQueryRequest.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, retain) NSNumber *limit</Declaration>
			
			
			<Anchor>//api/name/limit</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/DynamoDBQueryRequest/setConsistentRead:</TokenIdentifier>
			<Abstract type="html">If set to &lt;code&gt;true&lt;/code&gt;, then a consistent read is issued.
Otherwise eventually-consistent is used.</Abstract>
			<DeclaredIn>DynamoDBQueryRequest.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic) bool consistentRead</Declaration>
			
			
			<Anchor>//api/name/consistentRead</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/DynamoDBQueryRequest/consistentRead</TokenIdentifier>
			<Abstract type="html">If set to &lt;code&gt;true&lt;/code&gt;, then a consistent read is issued.
Otherwise eventually-consistent is used.</Abstract>
			<DeclaredIn>DynamoDBQueryRequest.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic) bool consistentRead</Declaration>
			
			
			<Anchor>//api/name/consistentRead</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/DynamoDBQueryRequest/setCount:</TokenIdentifier>
			<Abstract type="html">If set to &lt;code&gt;true&lt;/code&gt;, Amazon DynamoDB returns a total number of
items that match the query parameters, instead of a list of the
matching items and their attributes. Do not set &lt;code&gt;Count&lt;/code&gt; to
&lt;code&gt;true&lt;/code&gt; while providing a list of
&lt;code&gt;AttributesToGet&lt;/code&gt;, otherwise Amazon DynamoDB returns a
validation error.</Abstract>
			<DeclaredIn>DynamoDBQueryRequest.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic) bool count</Declaration>
			
			
			<Anchor>//api/name/count</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/DynamoDBQueryRequest/count</TokenIdentifier>
			<Abstract type="html">If set to &lt;code&gt;true&lt;/code&gt;, Amazon DynamoDB returns a total number of
items that match the query parameters, instead of a list of the
matching items and their attributes. Do not set &lt;code&gt;Count&lt;/code&gt; to
&lt;code&gt;true&lt;/code&gt; while providing a list of
&lt;code&gt;AttributesToGet&lt;/code&gt;, otherwise Amazon DynamoDB returns a
validation error.</Abstract>
			<DeclaredIn>DynamoDBQueryRequest.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic) bool count</Declaration>
			
			
			<Anchor>//api/name/count</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/DynamoDBQueryRequest/setHashKeyValue:</TokenIdentifier>
			<Abstract type="html">Attribute value of the hash component of the composite primary key.</Abstract>
			<DeclaredIn>DynamoDBQueryRequest.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, retain) DynamoDBAttributeValue *hashKeyValue</Declaration>
			
			
			<Anchor>//api/name/hashKeyValue</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/DynamoDBQueryRequest/hashKeyValue</TokenIdentifier>
			<Abstract type="html">Attribute value of the hash component of the composite primary key.</Abstract>
			<DeclaredIn>DynamoDBQueryRequest.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, retain) DynamoDBAttributeValue *hashKeyValue</Declaration>
			
			
			<Anchor>//api/name/hashKeyValue</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/DynamoDBQueryRequest/setRangeKeyCondition:</TokenIdentifier>
			<Abstract type="html">A container for the attribute values and comparison operators to use
for the query.</Abstract>
			<DeclaredIn>DynamoDBQueryRequest.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, retain) DynamoDBCondition *rangeKeyCondition</Declaration>
			
			
			<Anchor>//api/name/rangeKeyCondition</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/DynamoDBQueryRequest/rangeKeyCondition</TokenIdentifier>
			<Abstract type="html">A container for the attribute values and comparison operators to use
for the query.</Abstract>
			<DeclaredIn>DynamoDBQueryRequest.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, retain) DynamoDBCondition *rangeKeyCondition</Declaration>
			
			
			<Anchor>//api/name/rangeKeyCondition</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/DynamoDBQueryRequest/setScanIndexForward:</TokenIdentifier>
			<Abstract type="html">Specifies forward or backward traversal of the index. Amazon DynamoDB
returns results reflecting the requested order, determined by the
range key. The default value is &lt;code&gt;true&lt;/code&gt; (forward).</Abstract>
			<DeclaredIn>DynamoDBQueryRequest.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic) bool scanIndexForward</Declaration>
			
			
			<Anchor>//api/name/scanIndexForward</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/DynamoDBQueryRequest/scanIndexForward</TokenIdentifier>
			<Abstract type="html">Specifies forward or backward traversal of the index. Amazon DynamoDB
returns results reflecting the requested order, determined by the
range key. The default value is &lt;code&gt;true&lt;/code&gt; (forward).</Abstract>
			<DeclaredIn>DynamoDBQueryRequest.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic) bool scanIndexForward</Declaration>
			
			
			<Anchor>//api/name/scanIndexForward</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/DynamoDBQueryRequest/setExclusiveStartKey:</TokenIdentifier>
			<Abstract type="html">Primary key of the item from which to continue an earlier query. An
earlier query might provide this value as the
&lt;code&gt;LastEvaluatedKey&lt;/code&gt; if that query operation was interrupted
before completing the query; either because of the result set size or
the &lt;code&gt;Limit&lt;/code&gt; parameter. The &lt;code&gt;LastEvaluatedKey&lt;/code&gt;
can be passed back in a new query request to continue the operation
from that point.</Abstract>
			<DeclaredIn>DynamoDBQueryRequest.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, retain) DynamoDBKey *exclusiveStartKey</Declaration>
			
			
			<Anchor>//api/name/exclusiveStartKey</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/DynamoDBQueryRequest/exclusiveStartKey</TokenIdentifier>
			<Abstract type="html">Primary key of the item from which to continue an earlier query. An
earlier query might provide this value as the
&lt;code&gt;LastEvaluatedKey&lt;/code&gt; if that query operation was interrupted
before completing the query; either because of the result set size or
the &lt;code&gt;Limit&lt;/code&gt; parameter. The &lt;code&gt;LastEvaluatedKey&lt;/code&gt;
can be passed back in a new query request to continue the operation
from that point.</Abstract>
			<DeclaredIn>DynamoDBQueryRequest.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, retain) DynamoDBKey *exclusiveStartKey</Declaration>
			
			
			<Anchor>//api/name/exclusiveStartKey</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/DynamoDBQueryRequest/init</TokenIdentifier>
			<Abstract type="html">Default constructor for a new QueryRequest object.  Callers should use the
property methods to initialize this object after creating it.</Abstract>
			<DeclaredIn>DynamoDBQueryRequest.h</DeclaredIn>			
			
			<Declaration>- (id)init</Declaration>
			
			
			<Anchor>//api/name/init</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/DynamoDBQueryRequest/initWithTableName:andHashKeyValue:</TokenIdentifier>
			<Abstract type="html">Constructs a new QueryRequest object.
Callers should use properties to initialize any additional object members.</Abstract>
			<DeclaredIn>DynamoDBQueryRequest.h</DeclaredIn>			
			
			<Declaration>- (id)initWithTableName:(NSString *)theTableName andHashKeyValue:(DynamoDBAttributeValue *)theHashKeyValue</Declaration>
			<Parameters>
				<Parameter>
					<Name>theTableName</Name>
					<Abstract type="html">The name of the table in which you want to query.
Allowed characters are &lt;code&gt;a-z&lt;/code&gt;, &lt;code&gt;A-Z&lt;/code&gt;,
&lt;code&gt;0-9&lt;/code&gt;, &lt;code&gt;_&lt;/code&gt; (underscore), &lt;code&gt;-&lt;/code&gt; (hyphen)
and &lt;code&gt;.&lt;/code&gt; (period).</Abstract>
				</Parameter><Parameter>
					<Name>theHashKeyValue</Name>
					<Abstract type="html">Attribute value of the hash component of the
composite primary key.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/initWithTableName:andHashKeyValue:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/DynamoDBQueryRequest/addAttributesToGet:</TokenIdentifier>
			<Abstract type="html">Adds a single object to attributesToGet.
This function will alloc and init attributesToGet if not already done.</Abstract>
			<DeclaredIn>DynamoDBQueryRequest.h</DeclaredIn>			
			
			<Declaration>- (void)addAttributesToGet:(NSString *)attributesToGetObject</Declaration>
			
			
			<Anchor>//api/name/addAttributesToGet:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/DynamoDBQueryRequest/description</TokenIdentifier>
			<Abstract type="html">Returns a string representation of this object; useful for testing and
debugging.</Abstract>
			<DeclaredIn>DynamoDBQueryRequest.h</DeclaredIn>			
			
			<Declaration>- (NSString *)description</Declaration>
			
			<ReturnValue><Abstract type="html">A string representation of this object.</Abstract></ReturnValue>
			<Anchor>//api/name/description</Anchor>
		</Token>
		
	</File>
</Tokens>